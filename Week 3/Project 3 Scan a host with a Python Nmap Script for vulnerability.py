import os
import nmap

# Ensure Nmap is in PATH for this session
os.environ["PATH"] += os.pathsep + r"C:\Program Files (x86)\Nmap"

class PortScanner:
    def __init__(self):
        try:
            self.scanner = nmap.PortScanner()
        except nmap.PortScannerError as e:
            print(f"Failed to initialize Nmap scanner: {e}")
            raise

    def scan_top_ports(self, host, top_ports=10, show_only_open=False):
        print(f"\nScanning top {top_ports} ports for {host}...\n")
        try:
            self.scanner.scan(hosts=host, arguments=f"--top-ports {top_ports} -Pn")
        except nmap.PortScannerError as e:
            print(f" Scan failed: {e}")
            return

        for h in self.scanner.all_hosts():
            print(f"Nmap scan report for {h}")
            print(f"Host state {self.scanner[h].state()}\n")

            for p in self.scanner[h].all_protocols():
                ports = sorted(self.scanner[h][p].keys())
                for port in ports:
                    state = self.scanner[h][p][port]["state"]
                    service = self.scanner[h][p][port].get("name", "unknown")

                    if show_only_open and state != "open":
                        continue
                    print(f"Port {port}/{p}\t{state}\t{service}")
        print("\nScan complete!")

    def vuln_scan(self, host):
        print(f"\nRunning vulnerability scan against {host}...\n")
        
        try:
            self.scanner.scan(hosts=host, arguments="--script vuln -Pn")
        except nmap.PortScannerError as e:
            print(f" Vulnerability scan failed: {e}")
            return
        

        for h in self.scanner.all_hosts():
            print(f"Nmap vulnerability scan report for {h}")
            for p in self.scanner[h].all_protocols():
                ports = sorted(self.scanner[h][p].keys())
                for port in ports:
                    state = self.scanner[h][p][port]["state"]
                    service = self.scanner[h][p][port].get("name", "unknown")
                    script_results = self.scanner[h][p][port].get("script", {})

                    print(f"Port {port}/{p}\t{state}\t{service}")
                    for script, result in script_results.items():
                        print(f"  Script: {script}\n  Result: {result}\n")
        print("\nVulnerability scan complete!")


if __name__ == "__main__":
    target_host = input("Enter the target host IP (or leave blank for default scan {scanme.nmap.org}):").strip()
    if not target_host:
        target_host = "scanme.nmap.org"

    print("\nChoose scan type:")
    print("1. Top ports scan")
    print("2. Vulnerability scan (Nmap NSE)")

    choice = input("Enter choice (1/2): ").strip()

    scanner = PortScanner()

    if choice == "1":
        try:
            top_ports = int(input("Enter the number of top ports to scan (e.g., 5, 10, 15): ").strip())
        except ValueError:
            top_ports = 10

        show_only_open = input("Show only open ports? (yes/no): ").strip().lower() == "yes"
        scanner.scan_top_ports(target_host, top_ports, show_only_open)

    elif choice == "2":
        scanner.vuln_scan(target_host)

    else:
        print("Invalid choice. Exiting.")
